generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                  String          @id @default(cuid())
  name                String?
  brand               String?
  imageUrl            String?
  qrcodeUrl           String?
  brandLogoUrl        String?         @default("")
  description         String?         @default("")
  prompt              String?         @default("")
  promptVideo         String?         @default("")  

  userId              String?         
  user                User?           @relation(fields: [userId], references: [id])

  startDate           DateTime?       @default(now())
  endDate             DateTime?       @default(now())

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  seenDrops           SeenDrop[]
}

model SeenDrop {
  id                  String          @id @default(cuid())
  name                String?
  message             String?
  imageUrl            String?
  imageOverlayedUrl   String?
  videoUrl            String?
  eventId             String
  userId              String?
  claimToken          String?
  type                String?          @default("image")

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  event               Event           @relation(fields: [eventId], references: [id])
  user                User?           @relation(fields: [userId], references: [id])
}

model User {
  id                  String          @id @default(cuid())
  externalId          String
  firstName           String?
  lastName            String?
  email               String          @unique
  role                String          @default("user")

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  seenDrops           SeenDrop[]
  events              Event[]
  products            Product[]
  productInstances    ProductInstance[]
}

model Product {
  id                  String          @id @default(cuid())
  name                String
  description         String?         @default("")
  type                String          @default("free") 
  recurrenceType      String          @default("oneoff")
  userType            String          @default("user")

  limitImages         Int?            @default(0)
  limitVideos         Int?            @default(0)
  
  priceRecurring      Float?          @default(0.0)
  priceOneoff         Float?          @default(0.0)
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  users               User[]
  productInstances    ProductInstance[]
}

model ProductInstance {
  id                  String          @id @default(cuid())
  userId              String
  productId           String
  status              String          @default("active")

  limitImages         Int?            @default(0)
  limitVideos         Int?            @default(0)
  imagesCount         Int?            @default(0)
  videosCount         Int?            @default(0)
  
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  user                User            @relation(fields: [userId], references: [id])
  product             Product         @relation(fields: [productId], references: [id])
}